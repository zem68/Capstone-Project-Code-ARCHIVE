"""
IMPORTANT Notes:

This is a test program for the Learning Factory TA Scheduler
where a 5 weekday schedule AND 3 day weekend schedule is built for 38 TAs. All input is hard-coded in program.

PLEASE COMMENT ALL CODE FOR EASY UNDERSTANDING

"""

from ortools.sat.python import cp_model


def main() -> None:
    # This program tries to find an optimal assignment of TAs to shifts
    # (28 30min increments per day, for 5 days), subject to some constraints (see below).

    # Change num_days to 60 later (or however many TAs there are)
    num_TAs = 38
    
    # Number of 30-minute increments per day (14 hours, 8 AM - 10 PM)
    num_30minIncrements = 28
    
    # Number of work weekdays in a week, change to 5 later
    num_days = 5
    
    # Ranges for easy looping
    all_TAs = range(num_TAs)
    all_30minIncrements = range(num_30minIncrements)
    all_days = range(num_days)
    # Peak hours: 8 AM - 6 PM (20 slots), Off-peak: 6 PM - 10 PM (8 slots)
    peak_slots = range(20)
    offpeak_slots = range(20, num_30minIncrements)
    # Day Ranges: Mon-Thu are full weekdays, Friday is only a peak hour weekday
    mon_thu = range(4)
    friday = 4


    # The maximum amount of time (increments of 30min) each TA can work in a day/week
    min_30minIncrements_per_day = 0
    max_30minIncrements_per_day = 16
    max_30minIncrements_per_friday = 8
    min_30minIncrements_per_week = 3 # Must work at least one shift
    max_30minIncrements_per_week = 32 # Max of 16 hours per week during weekdays 



    # The maximum number of TAs at a time during peak and non-peak hours
    max_peakTAs = 6
    max_nonpeakTAs = 3


    # The target number of 30min increments for each TA to work weekly (only including weekdays): 
    # Sponsor wants 20 (10hrs), but that doesn't make sense, should be (total number of 30min increments that need to be worked) / (number of TAs)
    # target_30minIncrements_per_TA = 20 # By sponsor's request
    target_30minIncrements_per_TA = [17 for _ in all_TAs]
    # (5 days * 10 peak_hrs * 6 TAs per peak_hr) + (4 days * 4 nonpeak_hrs * 3 TAs per nonpeak_hr) = 348 hours that need to be worked
    # 298/38 = 7.8421 hrs per TA = 16 30minIncrements per TA (Low End, 5 TAs during peak hrs)
    # (5 days * 10 peak_hrs * 5 TAs per peak_hr) + (4 days * 4 nonpeak_hrs * 3 TAs per nonpeak_hr) = 298 hours that need to be worked
    # 348/38 = 9.15789 hrs per TA = 18 30minIncrements per TA (High End, 6 TAs during peak hrs)



    # The target number of TAs at a time during peak and non-peak hours
    target_peakTAs = 5
    target_nonpeakTAs = 3


    
    # TA requests for each 30min increment, 4 means can work, -1 means prefers not to, -2 means cannot
    # shift_requests = [
    #     # [[-2, -2, -2, -2, -2, -2, -2, -2, -2, 4, 4, 4, 4, 4, 4, -2, -2, -2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
    #     # [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]
    # ]
    
    # Initialize Arrays
    shift_requests = [[[0 for _ in all_30minIncrements] for _ in all_days] for _ in all_TAs]
    TA_Input = [[0 for _ in all_days] for _ in all_TAs]

    # TA_String is just a comma-seperated string of the data from Schedule Data.xlsx in Teams
    TA_String = "12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm,02:00pm - 02:30pm;02:30pm - 03:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm,04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm,05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm,09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am\n10:30am - 11:00am;11:00am - 11:30am;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;11:30am - 12:00pm,08:00am - 08:30am;08:30am - 09:00am;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm,10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;06:30pm - 07:00pm;06:00pm - 06:30pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm,10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm\n03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:30pm - 07:00pm;06:00pm - 06:30pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;,03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;06:00pm - 06:30pm;05:30pm - 06:00pm;06:30pm - 07:00pm;,04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;,\n08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;06:00pm - 06:30pm;06:30pm - 07:00pm,08:00am - 08:30am;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;12:30pm - 01:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm\n10:00am - 10:30am;10:30am - 11:00am;01:30pm - 02:00pm;01:00pm - 01:30pm;12:30pm - 01:00pm;12:00pm - 12:30pm;11:30am - 12:00pm;11:00am - 11:30am;,02:00pm - 02:30pm;05:30pm - 06:00pm;05:00pm - 05:30pm;04:30pm - 05:00pm;04:00pm - 04:30pm;03:30pm - 04:00pm;03:00pm - 03:30pm;02:30pm - 03:00pm;,01:30pm - 02:00pm;01:00pm - 01:30pm;12:30pm - 01:00pm;12:00pm - 12:30pm;11:30am - 12:00pm;11:00am - 11:30am;10:30am - 11:00am;10:00am - 10:30am;08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;,02:00pm - 02:30pm;05:30pm - 06:00pm;05:00pm - 05:30pm;04:30pm - 05:00pm;04:00pm - 04:30pm;03:30pm - 04:00pm;03:00pm - 03:30pm;02:30pm - 03:00pm;,\n11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm ;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm,,03:00pm - 03:30pm;03:30pm - 04:00pm;02:30pm - 03:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm,04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm,01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm\n01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;09:30am - 10:00am;09:00am - 09:30am;08:30am - 09:00am;08:00am - 08:30am;,01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;,01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;\n03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:30pm - 04:00pm;03:00pm - 03:30pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,,09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;,02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;\n01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;09:30pm - 10:00pm;09:00pm - 09:30pm;08:30pm - 09:00pm;08:00pm - 08:30pm;,03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;09:30pm - 10:00pm;09:00pm - 09:30pm;08:30pm - 09:00pm;08:00pm - 08:30pm;,01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;,02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;,11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;\n08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:30pm - 01:00pm;12:00pm - 12:30pm;09:30pm - 10:00pm;09:00pm - 09:30pm;08:30pm - 09:00pm;08:00pm - 08:30pm;07:30pm - 08:00pm;07:00pm - 07:30pm;06:30pm - 07:00pm;06:00pm - 06:30pm;,10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:30pm - 09:00pm;09:30pm - 10:00pm;09:00pm - 09:30pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;05:00pm - 05:30pm;05:30pm - 06:00pm;\n01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;09:30pm - 10:00pm;09:00pm - 09:30pm;08:30pm - 09:00pm;08:00pm - 08:30pm;07:30pm - 08:00pm;07:00pm - 07:30pm;06:30pm - 07:00pm;,01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;09:30pm - 10:00pm;09:00pm - 09:30pm;08:30pm - 09:00pm;08:00pm - 08:30pm;07:30pm - 08:00pm;07:00pm - 07:30pm;06:30pm - 07:00pm;06:00pm - 06:30pm;,01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;,01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;09:30pm - 10:00pm;09:00pm - 09:30pm;08:30pm - 09:00pm;08:00pm - 08:30pm;07:30pm - 08:00pm;07:00pm - 07:30pm;06:30pm - 07:00pm;06:00pm - 06:30pm;,01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;\n08:00am - 08:30am;09:00am - 09:30am;08:30am - 09:00am;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;02:30pm - 03:00pm;03:30pm - 04:00pm;03:00pm - 03:30pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm\n08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;06:00pm - 06:30pm;06:30pm - 07:00pm;07:30pm - 08:00pm;08:00pm - 08:30pm;07:00pm - 07:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm\n10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;,01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;,10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;,\n03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;,10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;,,10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;,11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;\n,03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;,03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;,01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;,\n10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;,12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;,10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;,12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;\n01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;,03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;,01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;,03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;,01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;\n08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;03:00pm - 03:30pm;03:30pm - 04:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;08:30pm - 09:00pm;08:00pm - 08:30pm,03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm\n10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;,09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;,10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;,10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;,09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;\n03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm\n12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;,12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;,12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:30pm - 05:00pm;05:00pm - 05:30pm;04:00pm - 04:30pm;05:30pm - 06:00pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;,\n11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;,05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;,01:30pm - 02:00pm;02:00pm - 02:30pm;,11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;\n08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,08:00am - 08:30am;08:30am - 09:00am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,08:00am - 08:30am;08:30am - 09:00am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;\n08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm,08:00am - 08:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,08:00am - 08:30am;12:30pm - 01:00pm;02:30pm - 03:00pm;02:00pm - 02:30pm;01:30pm - 02:00pm;01:00pm - 01:30pm,08:00am - 08:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm,11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:30pm - 03:00pm;02:00pm - 02:30pm\n08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;,09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;09:00am - 09:30am;08:00am - 08:30am;08:30am - 09:00am;,\n03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;,06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:30pm - 10:00pm;09:00pm - 09:30pm;08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;,06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,\n11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;06:00pm - 06:30pm;01:00pm - 01:30pm;06:30pm - 07:00pm,11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm,11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm\n08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;,,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;\n08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;\n,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;,12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;12:00pm - 12:30pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;06:00pm - 06:30pm;05:30pm - 06:00pm;06:30pm - 07:00pm;07:00pm - 07:30pm;,\n01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;,09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;08:00am - 08:30am;08:30am - 09:00am;,02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;,09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;08:00am - 08:30am;08:30am - 09:00am;,01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;\n11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:30pm - 02:00pm;01:00pm - 01:30pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm,11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm\n01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;,03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;,12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;,03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;,01:00pm - 01:30pm;01:30pm - 02:00pm;\n07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;09:00pm - 09:30pm;09:30pm - 10:00pm;08:30pm - 09:00pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;\n04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;,12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;03:00pm - 03:30pm;02:30pm - 03:00pm;03:30pm - 04:00pm;04:00pm - 04:30pm;05:00pm - 05:30pm;04:30pm - 05:00pm;05:30pm - 06:00pm;06:00pm - 06:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;,12:00pm - 12:30pm;01:00pm - 01:30pm;12:30pm - 01:00pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm;\n08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;,07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;,10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;01:00pm - 01:30pm;01:30pm - 02:00pm;02:00pm - 02:30pm;02:30pm - 03:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;\n08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;06:30pm - 07:00pm;07:00pm - 07:30pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;12:30pm - 01:00pm,03:00pm - 03:30pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;03:30pm - 04:00pm;08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am,03:00pm - 03:30pm;03:30pm - 04:00pm;04:30pm - 05:00pm;04:00pm - 04:30pm;05:00pm - 05:30pm;05:30pm - 06:00pm;06:00pm - 06:30pm;07:00pm - 07:30pm;06:30pm - 07:00pm;07:30pm - 08:00pm;08:00pm - 08:30pm;08:30pm - 09:00pm;09:00pm - 09:30pm;09:30pm - 10:00pm;08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am,08:00am - 08:30am;08:30am - 09:00am;09:00am - 09:30am;09:30am - 10:00am;10:00am - 10:30am;10:30am - 11:00am;11:00am - 11:30am;11:30am - 12:00pm;12:00pm - 12:30pm;12:30pm - 01:00pm;03:00pm - 03:30pm;03:30pm - 04:00pm;04:00pm - 04:30pm;04:30pm - 05:00pm;05:00pm - 05:30pm;05:30pm - 06:00pm"

    # Split TA_String into a 2D Array
    TA_String_Inter = TA_String.splitlines()
    for n in all_TAs:
        TA_Input[n] = TA_String_Inter[n].split(',')


    # Search through input array for substrings that indicate shift requests
    for n in all_TAs:
        for d in all_days:
            if "08:00am - 08:30am" in TA_Input[n][d]:
                shift_requests[n][d][0] = 4
            else:
                shift_requests[n][d][0] = -2
            
            if "08:30am - 09:00am" in TA_Input[n][d]:
                shift_requests[n][d][1] = 4
            else:
                shift_requests[n][d][1] = -2
            
            if "09:00am - 09:30am" in TA_Input[n][d]:
                shift_requests[n][d][2] = 4
            else:
                shift_requests[n][d][2] = -2
            
            if "09:30am - 10:00am" in TA_Input[n][d]:
                shift_requests[n][d][3] = 4
            else:
                shift_requests[n][d][3] = -2

            if "10:00am - 10:30am" in TA_Input[n][d]:
                shift_requests[n][d][4] = 4
            else:
                shift_requests[n][d][4] = -2
            
            if "10:30am - 11:00am" in TA_Input[n][d]:
                shift_requests[n][d][5] = 4
            else:
                shift_requests[n][d][5] = -2
            
            if "11:00am - 11:30am" in TA_Input[n][d]:
                shift_requests[n][d][6] = 4
            else:
                shift_requests[n][d][6] = -2
            
            if "11:30am - 12:00pm" in TA_Input[n][d]:
                shift_requests[n][d][7] = 4
            else:
                shift_requests[n][d][7] = -2
            
            if "12:00pm - 12:30pm" in TA_Input[n][d]:
                shift_requests[n][d][8] = 4
            else:
                shift_requests[n][d][8] = -2
            
            if "12:30pm - 01:00pm" in TA_Input[n][d]:
                shift_requests[n][d][9] = 4
            else:
                shift_requests[n][d][9] = -2
            
            if "01:00pm - 01:30pm" in TA_Input[n][d]:
                shift_requests[n][d][10] = 4
            else:
                shift_requests[n][d][10] = -2
            
            if "01:30pm - 02:00pm" in TA_Input[n][d]:
                shift_requests[n][d][11] = 4
            else:
                shift_requests[n][d][11] = -2
            
            if "02:00pm - 02:30pm" in TA_Input[n][d]:
                shift_requests[n][d][12] = 4
            else:
                shift_requests[n][d][12] = -2
            
            if "02:30pm - 03:00pm" in TA_Input[n][d]:
                shift_requests[n][d][13] = 4
            else:
                shift_requests[n][d][13] = -2
            
            if "03:00pm - 03:30pm" in TA_Input[n][d]:
                shift_requests[n][d][14] = 4
            else:
                shift_requests[n][d][14] = -2
            
            if "03:30pm - 04:00pm" in TA_Input[n][d]:
                shift_requests[n][d][15] = 4
            else:
                shift_requests[n][d][15] = -2
            
            if "04:00pm - 04:30pm" in TA_Input[n][d]:
                shift_requests[n][d][16] = 4
            else:
                shift_requests[n][d][16] = -2
            
            if "04:30pm - 05:00pm" in TA_Input[n][d]:
                shift_requests[n][d][17] = 4
            else:
                shift_requests[n][d][17] = -2
            
            if "05:00pm - 05:30pm" in TA_Input[n][d]:
                shift_requests[n][d][18] = 4
            else:
                shift_requests[n][d][18] = -2
            
            if "05:30pm - 06:00pm" in TA_Input[n][d]:
                shift_requests[n][d][19] = 4
            else:
                shift_requests[n][d][19] = -2
            
            if "06:00pm - 06:30pm" in TA_Input[n][d]:
                shift_requests[n][d][20] = 4
            else:
                shift_requests[n][d][20] = -2
            
            if "06:30pm - 07:00pm" in TA_Input[n][d]:
                shift_requests[n][d][21] = 4
            else:
                shift_requests[n][d][21] = -2
            
            if "07:00pm - 07:30pm" in TA_Input[n][d]:
                shift_requests[n][d][22] = 4
            else:
                shift_requests[n][d][22] = -2
            
            if "07:30pm - 08:00pm" in TA_Input[n][d]:
                shift_requests[n][d][23] = 4
            else:
                shift_requests[n][d][23] = -2
            
            if "08:00pm - 08:30pm" in TA_Input[n][d]:
                shift_requests[n][d][24] = 4
            else:
                shift_requests[n][d][24] = -2
            
            if "08:30pm - 09:00pm" in TA_Input[n][d]:
                shift_requests[n][d][25] = 4
            else:
                shift_requests[n][d][25] = -2
            
            if "09:00pm - 09:30pm" in TA_Input[n][d]:
                shift_requests[n][d][26] = 4
            else:
                shift_requests[n][d][26] = -2
            
            if "09:30pm - 10:00pm" in TA_Input[n][d]:
                shift_requests[n][d][27] = 4
            else:
                shift_requests[n][d][27] = -2






    # Incompatability Matrix: NxN Matrix (where N is TA count)
    # If element is 0, the two respective TAs can work together. If element is 1, the two respective TAs can NOT work together.
    incompatibility = [[0] * num_TAs for _ in range(num_TAs)]
    # incompatibility[0][14] = 1  # Example: TA 0 and TA 14 cannot work together
    # incompatibility[14][0] = 1  # Ensure symmetry

    # Ensure all TAs are able to work with themselves
    for i in all_TAs:
        incompatibility[i][i] = 0




    # Creates the model.
    model = cp_model.CpModel()

    # Creates decision variables for each TA for 30min increment for each day.
    # shifts[(n, d, s)]: TA 'n' works 30_min_increment 's' on day 'd'.
    # If TA n cannot work during a time slot (d, s), immediately mark shifts[(n, d, s)] == 0
    shifts = {}
    for n in all_TAs:
        for d in all_days:
            for s in all_30minIncrements:
                shifts[(n, d, s)] = model.new_bool_var(f"shift_n{n}_d{d}_s{s}")
                if shift_requests[n][d][s] == -2:
                    model.Add(shifts[n, d, s] == 0)

    
    # THE NEW FRIDAY INFO MAKES THE WEEKDAY SCHEDULER A LITTLE MORE COMPLICATED:
    # SINCE WE CAN'T HAVE A DIFFERENT AMOUNT OF HOURS IN A DAY,
    # JUST SET ALL DECISION VARIABLES DURING NON-PEAK HOURS FRIDAY TO 0
    for n in all_TAs:
        for s in offpeak_slots:
            model.Add(shifts[n, friday, s] == 0)




    # Add constraints so that:
    # Each 30min increment is assigned to at most 6 TAs during peak hours (8AM to 6PM) and at most 3 TAs during non-peak hours (6PM to 10PM).
    for d in mon_thu:
        for s in peak_slots:
            model.Add(sum(shifts[(n, d, s)] for n in all_TAs) <= max_peakTAs)
        for s in offpeak_slots:
            model.Add(sum(shifts[(n, d, s)] for n in all_TAs) <= max_nonpeakTAs)
    # FOR FRIDAY
    for s in peak_slots:
        model.Add(sum(shifts[(n, friday, s)] for n in all_TAs) <= max_peakTAs)


    # Add constraints so that:
    # Each TA doesn't work more or less than the specified weekly min/maxes
    for n in all_TAs:
        model.Add(sum(shifts[(n, d, s)] for d in all_days for s in all_30minIncrements) >= min_30minIncrements_per_week)
        model.Add(sum(shifts[(n, d, s)] for d in all_days for s in all_30minIncrements) <= max_30minIncrements_per_week)


    # Add constraints so that:
    # Each TA doesn't work more or less than the specified daily min/maxes
    for n in all_TAs:
        for d in mon_thu:
            model.Add(sum(shifts[(n, d, s)] for s in all_30minIncrements) >= min_30minIncrements_per_day)
            model.Add(sum(shifts[(n, d, s)] for s in all_30minIncrements) <= max_30minIncrements_per_day)
        model.Add(sum(shifts[(n, friday, s)] for s in all_30minIncrements) >= min_30minIncrements_per_day)
        model.Add(sum(shifts[(n, friday, s)] for s in all_30minIncrements) <= max_30minIncrements_per_friday)
    
    # Add constraints so that:
    # No 2 TAs can work together if they are marked on the Incompatability Matrix
    for d in all_days:
        for s in all_30minIncrements:
            for n1 in all_TAs:
                for n2 in all_TAs:
                    if incompatibility[n1][n2] == 1:
                        model.Add(shifts[(n1, d, s)] + shifts[(n2, d, s)] <= 1)


    
    # Add constraints to:
    # ENFORCE MINIMUM LENGTH OF SHIFT (3 30min increments)

    # Any TA working during 8:00AM-8:30AM must also be working 8:30AM-9:30AM
    for n in all_TAs:
        for d in all_days:
            model.Add(shifts[(n, d, 0)] + shifts[(n, d, 1)] + shifts[(n, d, 2)] == 3).only_enforce_if(shifts[(n, d, 0)])
    
    # Any TA starting a shift during a 30min increment from 8:30AM to 9:00PM, must also be working the next 2 subsequent 30min increments
    for n in all_TAs:
        for d in mon_thu:
            for s in range(1, 26):
                model.Add(shifts[(n, d, s)] + shifts[(n, d, s + 1)] + shifts[(n, d, s + 2)] == 3).only_enforce_if(shifts[(n, d, s)], ~shifts[(n, d, s - 1)])

    # Any TA working during 9:00PM-10:00PM must not be starting their shift during a 30min increment from 9:00PM-10:00PM
    for n in all_TAs:
        for d in mon_thu:
            for s in range(26, 28):
                model.Add(shifts[(n, d, s)] == 0).only_enforce_if(~shifts[(n, d, s - 1)])
    
    # FOR FRIDAY
    # Any TA starting a shift during a 30min increment from 8:30AM to 5:00PM, must also be working the next 2 subsequent 30min increments
    for n in all_TAs:
        for s in range(1, 18):
            model.Add(shifts[(n, friday, s)] + shifts[(n, friday, s + 1)] + shifts[(n, friday, s + 2)] == 3).only_enforce_if(shifts[(n, friday, s)], ~shifts[(n, friday, s - 1)])
    
    # FOR FRIDAY
    # Any TA working during 5:00PM-6:00PM must not be starting their shift during a 30min increment from 5:00PM-6:00PM
    for n in all_TAs:
        for s in range(18, 20):
            model.Add(shifts[(n, friday, s)] == 0).only_enforce_if(~shifts[(n, friday, s - 1)])





    # Create IntVars for objective function to ensure shift even-ness between all TAs. 
    # We want to minimize, for each TA:
    #                                  The difference between (target_30minIncrements_per_TA),
    #                                  and the total number of 30min increments they work in a week

    # INSTEAD, now we want to minimize: The LARGEST difference between (target_30minIncrements_per_TA),
    #                                   and the total number of 30min increments they work in a week
    difference_from_target_for_TAs = {}
    for n in all_TAs:
        difference_from_target_for_TAs[(n)] = model.new_int_var(0, max(max_30minIncrements_per_week - target_30minIncrements_per_TA[n], target_30minIncrements_per_TA[n]), f"difference_from_target_for_TA_{n}")
        model.AddAbsEquality(difference_from_target_for_TAs[(n)], sum(shifts[(n, d, s)] for d in all_days for s in all_30minIncrements) - target_30minIncrements_per_TA[n])

    max_difference_from_target_for_TAs = model.new_int_var(0, max_30minIncrements_per_week, f"max_difference_from_target_for_TAs")

    tempArray_for_difference_from_target_for_TAs = []
    for n in all_TAs:
        tempArray_for_difference_from_target_for_TAs.append(difference_from_target_for_TAs[(n)])

    model.AddMaxEquality(max_difference_from_target_for_TAs, tempArray_for_difference_from_target_for_TAs)


    # Create IntVars for objective function to ensure TA coverage at all times. 
    # We want to minimize, for each 30 min increment for each day:
    #                                  The maximum of (0, the target number of TAs per 30_min_increment
    #                                  minus the total number of TAs working during that 30_min_increment)
    #                                  *Note: Target for peak hours: 5 TAs. Target for non-peak hours: 3 TAs. 
    #                                  *Note: Max function is to ensure there is no extra bonus if there are more TAs working at a time than the target
    difference_from_target_for_30minIncrements = {}
    for d in mon_thu:
        for s in peak_slots:
            difference_from_target_for_30minIncrements[(d, s)] = model.new_int_var(0, target_peakTAs, f"difference_from_target_for_30minIncrement_{d}_{s}")
            model.AddMaxEquality(difference_from_target_for_30minIncrements[(d, s)], [0, target_peakTAs - (sum(shifts[(n, d, s)] for n in all_TAs))])
        for s in offpeak_slots:
            difference_from_target_for_30minIncrements[(d, s)] = model.new_int_var(0, target_nonpeakTAs, f"difference_from_target_for_30minIncrement_{d}_{s}")
            model.AddMaxEquality(difference_from_target_for_30minIncrements[(d, s)], [0, target_nonpeakTAs - (sum(shifts[(n, d, s)] for n in all_TAs))])

    # FOR FRIDAY
    for s in peak_slots:
            difference_from_target_for_30minIncrements[(friday, s)] = model.new_int_var(0, target_peakTAs, f"difference_from_target_for_30minIncrement_{friday}_{s}")
            model.AddMaxEquality(difference_from_target_for_30minIncrements[(friday, s)], [0, target_peakTAs - (sum(shifts[(n, friday, s)] for n in all_TAs))])




    print("OK\n")

    # Objective: Maximize TA preferences while ensuring coverage, and ensure shift even-ness
    model.Maximize(
        sum(shifts[(n, d, s)] * shift_requests[n][d][s] for n in all_TAs for d in all_days for s in all_30minIncrements) 
        # - sum(difference_from_target_for_TAs[(n)] for n in all_TAs)
        - (num_TAs * max_difference_from_target_for_TAs)
        - (3 * (sum(difference_from_target_for_30minIncrements[(d, s)] for d in mon_thu for s in all_30minIncrements)))
        - (3 * (sum(difference_from_target_for_30minIncrements[(friday, s)] for s in peak_slots)))
    )
        # For "Maximize Coverage" Soft Constraint (third one):
        # USE WEIGHT OF 3 (needs to be 3 to outweigh someone who doesn't want to work a shift (-1 points plus potential -1 if they are working more than Z) but needs to (3 points))




    # Warning Messages
    # Print warning if not enough TA coverage for a 30 min increment
    for d in mon_thu:
        for s in peak_slots:
            c = 0
            for n in all_TAs:
                if shift_requests[n][d][s] > -2:
                    c = c + 1
            if target_peakTAs > c:
                print(f"*WARNING* day_30minIncrement {d}_{s} Only has {c} available workers, needs {target_peakTAs}")
        for s in offpeak_slots:
            c = 0
            for n in all_TAs:
                if shift_requests[n][d][s] > -2:
                    c = c + 1
            if target_nonpeakTAs > c:
                print(f"*WARNING* day_30minIncrement {d}_{s} Only has {c} available workers, needs {target_nonpeakTAs}")
    # FOR FRIDAY
    for s in peak_slots:
            c = 0
            for n in all_TAs:
                if shift_requests[n][friday][s] > -2:
                    c = c + 1
            if target_peakTAs > c:
                print(f"*WARNING* day_30minIncrement {friday}_{s} Only has {c} available workers, needs {target_peakTAs}")


    # Solve model
    solver = cp_model.CpSolver()
    status = solver.Solve(model)

    # Display results
    if status in [cp_model.OPTIMAL, cp_model.FEASIBLE]:
        print("\nSolution Found: TA Shift Assignments\n")

        print(f"Objective Value: {solver.objective_value}\n")
        for n in all_TAs:
            assigned_shifts = [
                (d, s) for d in all_days for s in all_30minIncrements if solver.Value(shifts[(n, d, s)]) == 1
            ]
            print(f"TA {n}: {len(assigned_shifts)} shifts -> {assigned_shifts}")

            # USED FOR DUBUGGING 
            # print(f"difference_from_target_for_TA_{n} = {solver.value(difference_from_target_for_TAs[(n)])}")
            # print(f"Actual difference from target for TA {n}: {target_30minIncrements_per_TA[n] - sum(solver.Value(shifts[(n, d, s)]) for d in all_days for s in all_30minIncrements)}")
            # USED FOR DUBUGGING 

        # print(f"max_difference_from_target_for_TAs = {solver.value(max_difference_from_target_for_TAs)}")
        
        # Warning Messages
        # Print warning if any TA is working during a time slot they “don’t want to”
        for n in all_TAs:
            for d in mon_thu:
                for s in all_30minIncrements:
                    if solver.Value(shifts[(n, d, s)]) == 1 and shift_requests[n][d][s] == -1:
                        print(f"*WARNING* TA_day_30minIncrement {n}_{d}_{s} Working when not preferred")
            for s in peak_slots:
                    if solver.Value(shifts[(n, friday, s)]) == 1 and shift_requests[n][friday][s] == -1:
                        print(f"*WARNING* TA_day_30minIncrement {n}_{friday}_{s} Working when not preferred")


        # USED FOR DEBUGGING
        for d in mon_thu:
            for s in peak_slots:
                # print(f"difference_from_target_for_30minIncrements_{d}_{s} = {solver.value(difference_from_target_for_30minIncrements[(d, s)])}")
                print(f"Actual difference from target for 30minIncrement {d}_{s}: {target_peakTAs - (sum(solver.Value(shifts[(n, d, s)]) for n in all_TAs))}")
            for s in offpeak_slots:
                # print(f"difference_from_target_for_30minIncrements_{d}_{s} = {solver.value(difference_from_target_for_30minIncrements[(d, s)])}")
                print(f"Actual difference from target for 30minIncrement {d}_{s}: {target_nonpeakTAs - (sum(solver.Value(shifts[(n, d, s)]) for n in all_TAs))}")
        for s in peak_slots:
                # print(f"difference_from_target_for_30minIncrements_{friday}_{s} = {solver.value(difference_from_target_for_30minIncrements[(friday, s)])}")
                print(f"Actual difference from target for 30minIncrement {friday}_{s}: {target_peakTAs - (sum(solver.Value(shifts[(n, friday, s)]) for n in all_TAs))}")
        # USED FOR DEBUGGING

    else:
        print("\nNo feasible solution found. Try relaxing constraints further.")






















    # Number of shifts in a weekend
    WEEKEND_num_shifts = 3
    
    # Number of work weekends
    WEEKEND_num_weeks = 15
    
    # Weekend Ranges for easy looping
    WEEKEND_all_shifts = range(WEEKEND_num_shifts)
    WEEKEND_all_weeks = range(WEEKEND_num_weeks)
    WEEKEND_Friday = 0
    WEEKEND_SatSun = range(1, WEEKEND_num_shifts)



    # The maximum number of TAs at a time during Saturday and Sunday
    max_SatSunTAs = 2


    # Target number of shifts per TA across a semester is 2 or 3, so lets call it 2.5, and 2.5*2=5.
    # NEED TO MULTIPLY BY 2 BECAUSE CP-SAT DOESN'T SUPPORT DECIMALS
    WEEKEND_target_shifts_per_TAx2 = 5


    # TA requests for each WEEKEND shift, 4 means can work, -1 means prefers not to, -2 means cannot
    WEEKEND_shift_requests = [[[0 for _ in WEEKEND_all_shifts] for _ in WEEKEND_all_weeks] for _ in all_TAs]

    WEEKEND_TA_Input = [[0 for _ in WEEKEND_all_shifts] for _ in all_TAs]


    WEEKEND_TA_String = "January 31st;February 7th,February 1st;February 8th;February 15th,February 2nd;February 9th;February 16th\nJanuary 17th;January 24th;February 7th;February 21st;February 28th;April 4th;April 11th;April 18th;April 25th;May 2nd,February 15th;February 22nd;March 1st;April 5th;April 12th;April 19th;April 26th,February 9th;February 16th;February 23rd;March 2nd;April 6th;April 13th;April 20th;April 27th\nMarch 28th;,March 1st;,March 2nd;\nJanuary 17th,January 18th;January 25;February 1st;February 8th;February 15th;February 22nd;March 1st;March 8th,January 19th;January 26th;February 2nd;February 9th;February 16th;February 23rd;March 2nd;March 9th\nJanuary 24th;January 17th;February 7th;February 21st;,January 18th;January 25;February 8th;February 22nd;,January 26th;January 19th;February 9th;February 23rd;\nJanuary 17th;February 7th;March 7th;April 4th,January 18th;February 1st;March 1st;March 8th,January 19th;February 2nd;February 23rd\nFebruary 28th;February 21st;March 21st;April 4th;April 11th;April 18th;April 25th;January 31st;February 7th;January 24th;,January 18th;January 25;March 22nd;March 1st;February 22nd;February 15th;February 8th;February 1st;March 29th;April 5th;April 12th;April 26th;April 19th;,March 2nd;February 23rd;February 16th;February 9th;February 2nd;January 26th;January 19th;April 27th;April 20th;April 13th;April 6th;March 23rd;\nJanuary 17th;January 24th;January 31st;February 7th;February 14th;February 21st;March 7th;February 28th;March 21st;March 28th;April 4th;April 18th;April 11th;April 25th;,January 18th;January 25;February 1st;February 8th;February 15th;February 22nd;March 1st;April 19th;April 12th;April 5th;March 29th;April 26th;,January 19th;January 26th;February 2nd;February 9th;February 16th;February 23rd;March 2nd;March 30th;April 6th;April 13th;April 20th;\nJanuary 17th;January 24th;January 31st;February 7th;February 14th;February 21st;February 28th;March 7th;March 28th;April 4th;April 11th;April 18th;April 25th;May 2nd;March 21st;,January 18th;January 25;February 1st;February 8th;February 15th;February 22nd;March 1st;March 8th;March 22nd;March 29th;April 5th;April 12th;April 19th;April 26th;May 3rd;,January 19th;January 26th;February 2nd;February 9th;February 16th;February 23rd;March 2nd;March 9th;March 23rd;March 30th;April 6th;April 13th;April 20th;April 27th;\nJanuary 17th;January 24th;January 31st;February 7th;February 14th;February 21st;February 28th;March 7th;March 21st;March 28th;April 4th;April 11th;April 18th;April 25th;May 2nd;,January 18th;January 25;February 1st;February 8th;February 15th;February 22nd;March 1st;March 8th;March 22nd;March 29th;April 5th;April 12th;April 19th;April 26th;May 3rd;,January 26th;January 19th;February 2nd;February 9th;February 16th;February 23rd;March 2nd;March 9th;March 23rd;March 30th;April 6th;April 13th;April 20th;April 27th;\nJanuary 24th;February 21st;February 7th;January 17th;March 7th;February 28th;March 28th;April 4th;April 11th;,January 18th;January 25;February 8th;February 22nd;March 1st;March 22nd;March 29th;April 5th;,January 19th;January 26th;February 2nd;February 9th;February 23rd;March 9th;March 2nd;April 6th;March 30th;\nJanuary 17th;January 24th;January 31st;February 7th;February 14th;February 21st;February 28th;March 21st;March 28th;April 4th;April 11th;April 18th,January 18th;January 25;February 1st;February 8th;February 15th;February 22nd;March 1st;March 29th;April 5th;April 12th;April 19th,January 19th;January 26th;February 2nd;February 9th;February 16th;February 23rd;March 2nd;March 30th;April 6th;April 13th;April 20th\nJanuary 24th;January 31st;March 21st;February 28th;February 21st;February 14th;February 7th;March 28th;April 4th;April 11th;April 18th;April 25th;May 2nd,January 25;March 22nd;March 1st;February 22nd;February 15th;February 8th;February 1st;March 29th;April 5th;April 12th;April 19th;April 26th;May 3rd,January 26th;February 2nd;February 16th;March 2nd;February 23rd;February 9th;March 23rd;March 30th;April 6th;April 13th;April 20th;April 27th\nJanuary 31st;January 24th;,February 1st;January 25;,February 2nd;January 26th;\nMay 2nd;,May 3rd;April 12th;April 5th;March 29th;March 22nd;March 1st;,January 19th;January 26th;March 2nd;March 30th;March 23rd;April 6th;\nJanuary 31st;,February 1st;,February 2nd;\nJanuary 24th;January 31st;February 7th;February 14th;February 21st;February 28th;March 21st;March 28th;,January 25;February 1st;February 8th;February 15th;February 22nd;March 1st;March 8th;,January 26th;February 2nd;February 9th;February 16th;February 23rd;March 2nd;March 9th;\nJanuary 31st;February 7th;March 21st;March 28th;April 4th;April 11th;April 25th;,January 25;February 1st;February 8th;March 1st;March 29th;April 5th;April 26th;March 22nd;,February 2nd;February 16th;February 23rd;March 2nd;March 30th;April 27th;\nJanuary 17th;January 24th;January 31st;February 7th;February 21st;February 14th;February 28th;March 7th;March 21st;March 28th;April 4th;April 11th;April 18th;April 25th;May 2nd,January 18th;January 25;February 1st;February 8th;February 15th;February 22nd;March 1st;March 8th;March 22nd;March 29th;April 5th;April 12th;April 19th;April 26th;May 3rd,January 19th;January 26th;February 2nd;February 9th;February 16th;February 23rd;March 2nd;March 9th;March 23rd;March 30th;April 6th;April 13th;April 20th;April 27th\nJanuary 17th;January 24th;January 31st;February 7th;February 14th;March 21st;May 2nd;,January 18th;January 25;February 1st;February 8th;February 15th;March 22nd;May 3rd;,March 9th;\nJanuary 24th;January 31st;February 7th;February 21st;February 28th;March 21st;March 28th;April 4th;April 11th;April 18th;April 25th,January 25;February 1st;February 8th;February 22nd;March 1st;March 22nd;March 29th;April 5th;April 12th;April 19th;April 26th,January 19th;February 9th;February 2nd;January 26th;February 23rd;March 2nd;March 23rd;March 30th;April 6th;April 27th;April 20th;April 13th\nJanuary 31st;,February 1st;,February 2nd;\nJanuary 17th;January 31st;February 14th;,January 18th;,April 27th;\nJanuary 17th;January 24th;January 31st;February 7th;February 14th;February 21st;February 28th;March 7th;March 21st;March 28th;April 4th;April 11th;April 18th;April 25th;May 2nd;,January 18th;February 1st;February 8th;January 25;February 15th;March 1st;February 22nd;March 8th;March 22nd;March 29th;April 5th;April 12th;April 19th;May 3rd;,January 19th;January 26th;February 2nd;February 9th;February 16th;February 23rd;March 2nd;March 9th;March 23rd;March 30th;April 6th;April 13th;April 20th;April 27th;\nFebruary 7th;February 21st;January 17th;January 24th;April 18th;April 4th;March 28th,February 22nd;May 3rd;April 26th;April 19th;April 12th;April 5th;March 1st;February 1st;January 25;January 18th,January 19th;January 26th;February 2nd;February 9th;February 16th;February 23rd;March 30th;April 6th;April 13th;April 20th;April 27th\nJanuary 31st;,February 1st;,February 2nd;\nJanuary 17th;February 7th;,January 18th;February 8th;,January 19th;February 9th;\nJanuary 24th,April 26th,January 19th;January 26th;February 2nd;February 9th;February 16th;February 23rd\nJanuary 17th;January 24th;January 31st;April 4th;April 11th;April 18th;April 25th;,January 18th;January 25;April 5th;April 12th;April 19th;April 26th;May 3rd;,April 27th;\nJanuary 24th;January 31st;February 7th;February 14th;February 21st;February 28th;March 7th;March 21st;March 28th;April 4th;April 11th;April 18th;April 25th;,January 25;February 1st;February 8th;February 15th;February 22nd;April 26th;April 19th;April 12th;April 5th;March 29th;March 22nd;March 8th;March 1st;,January 26th;February 2nd;February 9th;April 20th;April 13th;April 27th;April 6th;March 30th;March 23rd;March 9th;March 2nd;February 23rd;February 16th;\nJanuary 24th;January 31st;February 7th;February 14th;January 17th;February 21st;February 28th;March 7th;March 21st;March 28th;April 4th;April 11th;April 18th;April 25th;May 2nd;,January 25;February 8th;February 1st;February 15th;February 22nd;March 1st;March 8th;March 22nd;March 29th;April 5th;April 12th;April 19th;April 26th;May 3rd;,January 26th;February 2nd;February 9th;February 16th;February 23rd;March 2nd;March 9th;March 23rd;March 30th;April 6th;April 13th;April 20th;April 27th;\nJanuary 24th;February 7th;February 21st;March 21st;April 18th;April 4th;May 2nd;,January 25;February 8th;February 22nd;March 22nd;April 5th;April 19th;,January 26th;February 9th;March 2nd;March 23rd;April 6th;April 20th;\nJanuary 24th;January 31st;January 17th;February 7th;April 11th;April 4th,January 25;February 1st;February 8th;February 22nd;March 1st;April 5th;April 12th,January 19th;January 26th;February 2nd;February 23rd;March 2nd;April 6th;April 13th\nJanuary 31st;February 7th;February 14th;February 21st;January 24th;,February 1st;February 8th;February 15th;February 22nd;March 1st;January 25;,February 2nd;February 9th;February 16th;February 23rd;March 2nd;\nJanuary 17th;February 7th;February 14th;March 28th;April 4th;April 11th;April 18th;April 25th;March 21st;,January 18th;February 8th;February 15th;March 22nd;March 29th;April 5th;April 12th;April 19th;April 26th;,January 19th;February 9th;February 16th;March 23rd;March 30th;April 6th;April 13th;April 20th;April 27th;\nJanuary 17th;January 24th;January 31st;February 7th;February 14th;February 21st;February 28th;March 28th;March 21st;April 4th;April 11th;April 18th;April 25th;,January 18th;January 25;February 1st;February 8th;February 15th;February 22nd;March 1st;March 22nd;March 29th;April 5th;April 19th;April 12th;April 26th;,January 19th;February 2nd;January 26th;February 9th;February 16th;February 23rd;March 2nd;March 23rd;March 30th;April 6th;April 13th;April 20th;\nJanuary 17th;February 28th;February 21st;,January 18th;February 1st;February 8th;February 15th;February 22nd;March 1st;March 29th;April 5th;April 12th;,January 19th;\nJanuary 31st;February 7th;February 14th;February 28th;March 7th;March 21st;March 28th;April 4th;April 11th;April 18th;April 25th;May 2nd,January 18th;February 1st;February 8th;February 15th;March 1st;March 8th;March 22nd;March 29th;April 5th;April 12th;April 19th;May 3rd;April 26th,January 19th;February 2nd;February 9th;February 16th;March 2nd;March 9th;March 23rd;March 30th;April 13th;April 6th;April 20th;April 27th"

    WEEKEND_TA_String_Inter = WEEKEND_TA_String.splitlines()
    for n in all_TAs:
        WEEKEND_TA_Input[n] = WEEKEND_TA_String_Inter[n].split(',')


    for n in all_TAs:
        if "January 17th" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][0][0] = 4
        else:
            WEEKEND_shift_requests[n][0][0] = 0

        if "January 18th" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][0][1] = 4
        else:
            WEEKEND_shift_requests[n][0][1] = 0

        if "January 19th" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][0][2] = 4
        else:
            WEEKEND_shift_requests[n][0][2] = 0

        if "January 24th" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][1][0] = 4
        else:
            WEEKEND_shift_requests[n][1][0] = 0

        if "January 25" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][1][1] = 4
        else:
            WEEKEND_shift_requests[n][1][1] = 0

        if "January 26th" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][1][2] = 4
        else:
            WEEKEND_shift_requests[n][1][2] = 0

        if "January 31st" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][2][0] = 4
        else:
            WEEKEND_shift_requests[n][2][0] = 0

        if "February 1st" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][2][1] = 4
        else:
            WEEKEND_shift_requests[n][2][1] = 0

        if "February 2nd" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][2][2] = 4
        else:
            WEEKEND_shift_requests[n][2][2] = 0

        if "February 7th" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][3][0] = 4
        else:
            WEEKEND_shift_requests[n][3][0] = 0

        if "February 8th" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][3][1] = 4
        else:
            WEEKEND_shift_requests[n][3][1] = 0

        if "February 9th" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][3][2] = 4
        else:
            WEEKEND_shift_requests[n][3][2] = 0

        if "February 14th" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][4][0] = 4
        else:
            WEEKEND_shift_requests[n][4][0] = 0

        if "February 15th" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][4][1] = 4
        else:
            WEEKEND_shift_requests[n][4][1] = 0

        if "February 16th" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][4][2] = 4
        else:
            WEEKEND_shift_requests[n][4][2] = 0

        if "February 21st" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][5][0] = 4
        else:
            WEEKEND_shift_requests[n][5][0] = 0

        if "February 22nd" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][5][1] = 4
        else:
            WEEKEND_shift_requests[n][5][1] = 0

        if "February 23rd" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][5][2] = 4
        else:
            WEEKEND_shift_requests[n][5][2] = 0

        if "February 28th" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][6][0] = 4
        else:
            WEEKEND_shift_requests[n][6][0] = 0

        if "March 1st" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][6][1] = 4
        else:
            WEEKEND_shift_requests[n][6][1] = 0

        if "March 2nd" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][6][2] = 4
        else:
            WEEKEND_shift_requests[n][6][2] = 0

        if "March 7th" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][7][0] = 4
        else:
            WEEKEND_shift_requests[n][7][0] = 0

        if "March 8th" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][7][1] = 4
        else:
            WEEKEND_shift_requests[n][7][1] = 0

        if "March 9th" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][7][2] = 4
        else:
            WEEKEND_shift_requests[n][7][2] = 0

        if "March 21st" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][8][0] = 4
        else:
            WEEKEND_shift_requests[n][8][0] = 0

        if "March 22nd" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][8][1] = 4
        else:
            WEEKEND_shift_requests[n][8][1] = 0

        if "March 23rd" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][8][2] = 4
        else:
            WEEKEND_shift_requests[n][8][2] = 0

        if "March 28th" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][9][0] = 4
        else:
            WEEKEND_shift_requests[n][9][0] = 0

        if "March 29th" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][9][1] = 4
        else:
            WEEKEND_shift_requests[n][9][1] = 0

        if "March 30th" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][9][2] = 4
        else:
            WEEKEND_shift_requests[n][9][2] = 0

        if "April 4th" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][10][0] = 4
        else:
            WEEKEND_shift_requests[n][10][0] = 0

        if "April 5th" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][10][1] = 4
        else:
            WEEKEND_shift_requests[n][10][1] = 0

        if "April 6th" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][10][2] = 4
        else:
            WEEKEND_shift_requests[n][10][2] = 0

        if "April 11th" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][11][0] = 4
        else:
            WEEKEND_shift_requests[n][11][0] = 0

        if "April 12th" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][11][1] = 4
        else:
            WEEKEND_shift_requests[n][11][1] = 0

        if "April 13th" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][11][2] = 4
        else:
            WEEKEND_shift_requests[n][11][2] = 0

        if "April 18th" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][12][0] = 4
        else:
            WEEKEND_shift_requests[n][12][0] = 0

        if "April 19th" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][12][1] = 4
        else:
            WEEKEND_shift_requests[n][12][1] = 0

        if "April 20th" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][12][2] = 4
        else:
            WEEKEND_shift_requests[n][12][2] = 0

        if "April 25th" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][13][0] = 4
        else:
            WEEKEND_shift_requests[n][13][0] = 0

        if "April 26th" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][13][1] = 4
        else:
            WEEKEND_shift_requests[n][13][1] = 0

        if "April 27th" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][13][2] = 4
        else:
            WEEKEND_shift_requests[n][13][2] = 0

        if "May 2nd" in WEEKEND_TA_Input[n][0]:
            WEEKEND_shift_requests[n][14][0] = 4
        else:
            WEEKEND_shift_requests[n][14][0] = 0

        if "May 3rd" in WEEKEND_TA_Input[n][1]:
            WEEKEND_shift_requests[n][14][1] = 4
        else:
            WEEKEND_shift_requests[n][14][1] = 0

        if "May 4th" in WEEKEND_TA_Input[n][2]:
            WEEKEND_shift_requests[n][14][2] = 4
        else:
            WEEKEND_shift_requests[n][14][2] = 0




    # Quick fix: Cannot work should be -2
    for n in all_TAs:
        for w in WEEKEND_all_weeks:
            for s in WEEKEND_all_shifts:
                if WEEKEND_shift_requests[n][w][s] == 0:
                    WEEKEND_shift_requests[n][w][s] = -2



    # Creates the model.
    WEEKENDmodel = cp_model.CpModel()


    # Creates decision variables for each TA for 30min increment for each day.
    # shifts[(n, d, s)]: TA 'n' works 30_min_increment 's' on day 'd'.
    # If TA n cannot work during a time slot (d, s), immediately mark shifts[(n, d, s)] == 0
    WEEKENDshifts = {}
    for n in all_TAs:
        for w in WEEKEND_all_weeks:
            for s in WEEKEND_all_shifts:
                WEEKENDshifts[(n, w, s)] = WEEKENDmodel.new_bool_var(f"shift_n{n}_w{w}_s{s}")
                if WEEKEND_shift_requests[n][w][s] == -2:
                    WEEKENDmodel.Add(WEEKENDshifts[(n, w, s)] == 0)



    # *Note: Sunday of Final Week is not worked*
    # Add constraints so that:
    # Each shift is assigned to exactly 3 TAs during Friday and 2 TAs during Sat/Sun
    for w in WEEKEND_all_weeks:
        WEEKENDmodel.Add(sum(WEEKENDshifts[(n, w, WEEKEND_Friday)] for n in all_TAs) == max_nonpeakTAs)
        for s in WEEKEND_SatSun:
            if w != 14 or s != 2:
                WEEKENDmodel.Add(sum(WEEKENDshifts[(n, w, s)] for n in all_TAs) == max_SatSunTAs)



    # Create IntVars for objective function to ensure shift even-ness between all TAs. 
    # We want to minimize:
    #                      The LARGEST difference between (WEEKEND_target_shifts_per_TA),
    #                      and the total number of shifts they work in a semester
    WEEKEND_subtraction_from_target_for_TAsx2 = {}
    WEEKEND_difference_from_target_for_TAsx2 = {}
    for n in all_TAs:
        WEEKEND_subtraction_from_target_for_TAsx2[(n)] = WEEKENDmodel.new_int_var(-1 * WEEKEND_num_weeks * (max_nonpeakTAs + max_SatSunTAs + max_SatSunTAs) * 2, WEEKEND_num_weeks * (max_nonpeakTAs + max_SatSunTAs + max_SatSunTAs) * 2, f"WEEKEND_subtraction_from_target_for_TA_{n}_x2")
        WEEKEND_difference_from_target_for_TAsx2[(n)] = WEEKENDmodel.new_int_var(0, WEEKEND_num_weeks * (max_nonpeakTAs + max_SatSunTAs + max_SatSunTAs) * 2, f"WEEKEND_difference_from_target_for_TA_{n}_x2")
        WEEKENDmodel.Add(WEEKEND_subtraction_from_target_for_TAsx2[(n)] == (sum(WEEKENDshifts[(n, w, s)] for w in WEEKEND_all_weeks for s in WEEKEND_all_shifts) * 2) - WEEKEND_target_shifts_per_TAx2)
        WEEKENDmodel.AddAbsEquality(WEEKEND_difference_from_target_for_TAsx2[(n)], WEEKEND_subtraction_from_target_for_TAsx2[(n)])

    WEEKEND_max_difference_from_target_for_TAsx2 = WEEKENDmodel.new_int_var(0, WEEKEND_num_weeks * (max_nonpeakTAs + max_SatSunTAs + max_SatSunTAs) * 2, f"WEEKEND_max_difference_from_target_for_TAsx2")

    tempArray_for_WEEKEND_difference_from_target_for_TAsx2 = []
    for n in all_TAs:
        tempArray_for_WEEKEND_difference_from_target_for_TAsx2.append(WEEKEND_difference_from_target_for_TAsx2[(n)])

    WEEKENDmodel.AddMaxEquality(WEEKEND_max_difference_from_target_for_TAsx2, tempArray_for_WEEKEND_difference_from_target_for_TAsx2)


    WEEKEND_max_difference_from_target_for_TAs = WEEKENDmodel.new_int_var(0, WEEKEND_num_weeks * (max_nonpeakTAs + max_SatSunTAs + max_SatSunTAs), f"WEEKEND_max_difference_from_target_for_TAs")
    WEEKENDmodel.AddDivisionEquality(WEEKEND_max_difference_from_target_for_TAs, WEEKEND_max_difference_from_target_for_TAsx2, 2)




    # Add constraints so that:
    # No 2 TAs can work together if they are marked on the Incompatability Matrix
    for w in WEEKEND_all_weeks:
        for s in WEEKEND_all_shifts:
            for n1 in all_TAs:
                for n2 in all_TAs:
                    if incompatibility[n1][n2] == 1:
                        WEEKENDmodel.Add(WEEKENDshifts[(n1, w, s)] + WEEKENDshifts[(n2, w, s)] <= 1)



    # Add constraints so that:
    # No TA works more than 8 hours on a Friday
    for n in all_TAs:
        if sum(solver.Value(shifts[(n, friday, s)]) for s in all_30minIncrements) > 8:
            print(f"TA {n} Works more than 4 hours Friday: {sum(solver.Value(shifts[(n, friday, s)]) for s in all_30minIncrements)}")




    # Objective: Maximize TA preferences while ensuring coverage, and ensure weekend shift even-ness
    WEEKENDmodel.Maximize(
        sum(WEEKENDshifts[(n, w, s)] * WEEKEND_shift_requests[n][w][s] for n in all_TAs for w in WEEKEND_all_weeks for s in WEEKEND_all_shifts)
        - (num_TAs * WEEKEND_max_difference_from_target_for_TAs) 
    )




    # Warning Messages
    # Print warning if not enough TA coverage for a shift
    for w in WEEKEND_all_weeks:
        c = 0
        for n in all_TAs:
            if WEEKEND_shift_requests[n][w][0] > -2:
                c = c + 1
        if max_nonpeakTAs > c:
            print(f"*WARNING* Weekend: week_shift {w}_{0} Only has {c} available workers, needs {max_nonpeakTAs}")

        for s in WEEKEND_SatSun:
            if w != 14 or s != 2:
                c = 0
                for n in all_TAs:
                    if WEEKEND_shift_requests[n][w][s] > -2:
                        c = c + 1
                if max_SatSunTAs > c:
                    print(f"*WARNING* Weekend: week_shift {w}_{s} Only has {c} available workers, needs {max_SatSunTAs}")




    # Solve model
    WEEKENDsolver = cp_model.CpSolver()
    WEEKENDstatus = WEEKENDsolver.Solve(WEEKENDmodel)

    # Display results
    if WEEKENDstatus in [cp_model.OPTIMAL, cp_model.FEASIBLE]:
        print("\nWeekend Solution Found: TA Shift Assignments\n")

        print(f"Weekend Objective Value: {WEEKENDsolver.objective_value}\n")

        for n in all_TAs:
            WEEKEND_assigned_shifts = [
                (w, s) for w in WEEKEND_all_weeks for s in WEEKEND_all_shifts if WEEKENDsolver.Value(WEEKENDshifts[(n, w, s)]) == 1
            ]
            print(f"TA {n}: {len(WEEKEND_assigned_shifts)} shifts -> {WEEKEND_assigned_shifts}")


        # Warning Messages
        # Print warning if any TA is working during a time slot they “don’t want to”
        for n in all_TAs:
            for w in WEEKEND_all_weeks:
                for s in WEEKEND_all_shifts:
                    if WEEKENDsolver.Value(WEEKENDshifts[(n, w, s)]) == 1 and WEEKEND_shift_requests[n][w][s] == -1:
                        print(f"*WARNING* Weekend: TA_week_shift {n}_{w}_{s} Working when not preferred")

        # DEBUGGING
        for w in WEEKEND_all_weeks:
            for s in WEEKEND_all_shifts:
                print(f"Week {w} shift {s}: {sum(WEEKENDsolver.Value(WEEKENDshifts[(n, w, s)]) for n in all_TAs)} workers covering")
        # DEBUGGING
        print(f"WEEKEND_max_difference_from_target_for_TAs = {WEEKENDsolver.Value(WEEKEND_max_difference_from_target_for_TAs)}")

    else:
        print("\nNo feasible solution found for weekend. Try relaxing constraints further.")

    



if __name__ == "__main__":
    main()




"""
Test Program for Learning Factory TA Scheduler
This script assigns TAs to shifts while considering:
- TA availability & preferences
- Minimum/maximum shift lengths
- Coverage constraints for peak/off-peak hours
- TA incompatibilities

"""
